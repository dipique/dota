@using DotA.WebEdit.Models;
@{
    Layout = null;
}

@model DynSingleView<Hero>
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Hero</title>
</head>
<body>
    @Html.ActionLink("Back to hero list", "Index")
    @using (Html.BeginForm())
    {
        Html.AntiForgeryToken();

    <table border="1">
        <tr>
            <td>Image</td>
            <td><img src="@Model.GetImage(Model.Item.ImgName)" alt="Image" /></td>
        </tr>
        @{
            foreach (var dv in Model.DisplayValues)
            {
                @:<tr><td>@dv.PropertyDisplayName</td><td>
                switch (dv.Type)
                {
                    case DisplayValueType.Decimal:
                    case DisplayValueType.String:
                    case DisplayValueType.Other:
                        @Html.TextBox(dv.PropertyName, dv.GetValue(Model.Item), new { @class = "form-control" });
                        break;
                    case DisplayValueType.PickList_Multi:
                        @Html.ListBox(dv.PropertyName, dv.PicklistOptionsAsListItems(Model.Item));
                        break;
                    case DisplayValueType.PickList:
                        @Html.DropDownList(dv.PropertyName, dv.PicklistOptionsAsListItems(Model.Item));
                        break;
                    case DisplayValueType.DecimalArray:
                        //Create 7 text boxes (this is the max number of levels that can be had (only invoker uses this)
                        var vals = dv.GetValue(Model.Item).Split(' ');
                        for (int x = 0; x < 7; x++)
                        {
                            var val = (vals.Count() - 1) < x ? vals[x] : string.Empty;
                            @Html.TextBox($"{dv.PropertyName}[{x}]", val);
                        }
                        break;
                }
                @:</td></tr>
            }
        }
        <tr></tr>
    </table>
            }
    <h1>Abilities</h1>
    @{ 
        foreach(var ability in Model.Item.Abilities)
        {
            @Html.Partial("Ability", new DynSingleView<Ability>(ability))
        }
    }
</body>
</html>
