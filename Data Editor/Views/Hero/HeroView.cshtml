@using DotA.WebEdit.Models;
@using DotA.Model.Extensions;
@{
    Layout = null;
}

@model DynSingleView<Hero>
<!DOCTYPE html>
<html>
<head>    
    <title>Hero</title>
    <link href="@Url.Content("~/Content/site.css")" rel="stylesheet" type="text/css" />
</head>
<body>
    <h1>Edit Hero</h1>
    @Html.ActionLink("Back to hero list", "Index")
    @using (Html.BeginForm("HeroUpdate", "Hero"))
    {

    <table border="1">
        <tr>
            <td>Image</td>
            <td>@*<img src="@Model.GetImage(Model.Item.ImgName)" alt="Image" />*@</td>
        </tr>
        @{
            var prefix = $"{nameof(Model.Item)}.";
            foreach (var dv in Model.DisplayValues)
            {
                string propName = $"{nameof(Model.Item)}.{dv.PropertyName}";

                <tr>
                    <td>@dv.PropertyDisplayName</td>
                    <td>
                        @if (dv.PrimaryKey)
                        {
                            //No updates work if we don't bind the primary key
                            @Html.Hidden(propName);
                        }

                        @if (dv.Type == DisplayValueType.DecimalList)
                        {
                            var value = dv.SrcProperty.GetValue<List<decimal>>(Model.Item);
                            var itemCount = value.Count() == 0 ? 4 : value.Count();
                            var includeLabels = itemCount != 1;
                            @Html.Partial("ListEdit",
                                value,
                                new ViewDataDictionary { { "Name", dv.PropertyName },
                                                         { "ModelPrefix", prefix },
                                                         { "IncludeLabels", includeLabels },
                                                         { "LabelPrefix", "Lvl" },
                                                         { "ItemCount", itemCount },
                                                         { "Disabled", !dv.Editable || dv.PrimaryKey}
                                });
                        }
                        else
                        {
                            var attribs = new { disabled = "disabled" };
                            if (dv.Editable && !dv.PrimaryKey) { attribs = null; }
                            @Html.Editor(propName, new { Name = dv.PropertyName, ModelPrefix = prefix, htmlAttributes = attribs });
                        }
                    </td>
                </tr>
            }
        }
    </table>
                <input type="submit" name="Update" />
            }
    <h1>Abilities</h1>
    @{ 
        foreach(var ability in Model.Item.Abilities)
        {
            @Html.Partial("Ability", new DynSingleView<Ability>(ability))
        }
    }
</body>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

</html>
