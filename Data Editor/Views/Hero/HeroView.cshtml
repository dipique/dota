@using DotA.WebEdit.Models;
@using DotA.Model.Extensions;
@{
    Layout = null;
}

@model DynSingleView<Hero>
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Hero</title>
</head>
<body>
    @Html.ActionLink("Back to hero list", "Index")
    @using (Html.BeginForm("HeroUpdate", "Hero"))
    {

    <table border="1">
        <tr>
            <td>Image</td>
            <td>@*<img src="@Model.GetImage(Model.Item.ImgName)" alt="Image" />*@</td>
        </tr>
        @{
            foreach (var dv in Model.DisplayValues)
            {
                @:<tr><td>@dv.PropertyDisplayName</td><td>
                if (!dv.Editable)
                {
                    switch (dv.Type)
                    {
                        case DisplayValueType.Decimal:
                            @Html.DisplayFor(Model.GetExpression<decimal>(dv));
                            break;
                        case DisplayValueType.DecimalList:
                            {
                                for (int x = 0; x <= dv.GetMaxIndex(Model.Item); x++)
                                {
                                    @Html.Label($"Lvl {x + 1}: ")
                                    @Html.Label(dv.SrcProperty.GetValue<List<decimal>>(Model.Item)[x].ToString());
                                }
                                break;
                            }
                        case DisplayValueType.PickList_Multi:
                            @Html.ListBox("Item." + dv.PropertyName, dv.PicklistOptionsAsListItems(Model.Item))
                            break;
                        case DisplayValueType.PickList:
                            @Html.DropDownList("Item." + dv.PropertyName)
                            break;
                        default:
                            @Html.DisplayFor(Model.GetExpression<object>(dv));
                            break;
                    }

                }
                else
                {
                    switch (dv.Type)
                    {
                        case DisplayValueType.Decimal:
                        @Html.EditorFor(Model.GetExpression<decimal>(dv));
                            break;
                        case DisplayValueType.PickList_Multi:
                        @Html.ListBox("Item." + dv.PropertyName, dv.PicklistOptionsAsListItems(Model.Item));
                            break;
                        case DisplayValueType.PickList:
                            //@Html.EnumDropDownListFor(Model.GetExpression<Enum>(dv));
                        @Html.DropDownList("Item." + dv.PropertyName, dv.PicklistOptionsAsListItems(Model.Item))
                            break;
                        case DisplayValueType.DecimalList:
                            {
                                for (int x = 0; x <= dv.GetMaxIndex(Model.Item); x++)
                                {
                                    @Html.Label($"Lvl {x + 1}: ")
                                    @Html.Editor($"Item.{dv.PropertyName}[{x}]");
                                }
                                break;
                            }
                        default:
                            @Html.EditorFor(Model.GetExpression<object>(dv));
                            break;
                    }
                }
                @:</td></tr>
            }
        }
        <tr></tr>
    </table>
                <input type="submit" name="Update" />
            }
            @*}*@
    <h1>Abilities</h1>
    @{ 
        foreach(var ability in Model.Item.Abilities)
        {
            @Html.Partial("Ability", new DynSingleView<Ability>(ability))
        }
    }
</body>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

</html>
