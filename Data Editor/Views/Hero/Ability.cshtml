@using DotA.WebEdit.Models;
@using DotA.Model.Extensions;
@using DotA.WebEdit.Helpers;
@{
    Layout = null;
}

@model DynSingleView<Ability>

    @using (Html.BeginForm("AbilityUpdate", "Hero"))
    {
        Html.AntiForgeryToken();

        <table border="1">
            @{
                var prefix = $"{nameof(Model.Item)}.";
                foreach (var dv in Model.DisplayValues)
                {
                    <tr><td>@dv.PropertyDisplayName</td><td>

                    @if (!dv.Editable)
                    {
                        switch (dv.Type)
                        {
                            case DisplayValueType.Decimal:
                                @Html.DisplayFor(Model.GetExpression<decimal>(dv));
                                break;
                            case DisplayValueType.PickList_Multi:
                                @Html.ListBox($"{prefix}{dv.PropertyName}", dv.PicklistOptionsAsListItems(Model.Item))
                                break;
                            case DisplayValueType.PickList:
                                @Html.DropDownList($"{prefix}{dv.PropertyName}")
                                break;
                            case DisplayValueType.DecimalList:
                                @Html.DisplayFor(Model.GetExpression<List<decimal>>(dv)); //TODO: adjust editor to disply with levels
                                break;
                            default:
                                @Html.DisplayFor(Model.GetExpression<object>(dv));
                                break;
                        }
                    }
                    else
                    {
                        string modelPrefix = $"{nameof(Model.Item)}.";
                        string propName = $"{nameof(Model.Item)}.{dv.PropertyName}";
                        
                        switch (dv.Type)
                        {
                            case DisplayValueType.Decimal:
                            case DisplayValueType.String:
                            case DisplayValueType.Other:
                                @Html.TextBox(propName, dv.GetValueAsString(Model.Item));
                                break;
                            case DisplayValueType.PickList:
                            case DisplayValueType.PickList_Multi:
                                @Html.Editor(propName, new { Name = dv.PropertyName, ModelPrefix = modelPrefix });
                                break;
                            //break;
                            case DisplayValueType.DecimalList:
                                @Html.EditorFor(Model.GetExpression<List<decimal>>(dv)); //TODO: adjust editor to display with levels
                                break;
                        }
                    }
                    </td></tr>
                    }
                }
            <tr></tr>
        </table>        
        <input type="submit" name="Update" />
        <h4>Effects</h4>
            foreach(Effect effect in Model.Item.Effects)
            {
                @Html.Partial("Effect", new DynSingleView<Effect>(effect))
            }
               }

@using (Html.BeginForm("NewEffectView", "Hero", new { parentName = Model.Item.Name }))
{
    <input type="submit" name="newEffect" value="New Effect"/>
}
<p />